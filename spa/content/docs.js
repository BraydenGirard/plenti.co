/* generated by Svelte v3.23.0 */
import {
	HtmlTag,
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from '/spa/web_modules/svelte/internal/index.js';

import DocsNav from '/spa/content/../components/docs_nav.js';

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

function get_each_context_5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (17:20) {#if paragraph.p}
function create_if_block_1(ctx) {
	let each_1_anchor;
	let each_value_5 = /*paragraph*/ ctx[6].p;
	let each_blocks = [];

	for (let i = 0; i < each_value_5.length; i += 1) {
		each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*sections*/ 2) {
				each_value_5 = /*paragraph*/ ctx[6].p;
				let i;

				for (i = 0; i < each_value_5.length; i += 1) {
					const child_ctx = get_each_context_5(ctx, each_value_5, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_5(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_5.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (18:24) {#each paragraph.p as line}
function create_each_block_5(ctx) {
	let html_tag;
	let raw_value = /*line*/ ctx[18] + "";
	let t;

	return {
		c() {
			t = text("Â ");
			html_tag = new HtmlTag(t);
		},
		m(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*sections*/ 2 && raw_value !== (raw_value = /*line*/ ctx[18] + "")) html_tag.p(raw_value);
		},
		d(detaching) {
			if (detaching) html_tag.d();
			if (detaching) detach(t);
		}
	};
}

// (22:20) {#if paragraph.t}
function create_if_block(ctx) {
	let table;
	let thead;
	let tr;
	let t;
	let tbody;
	let each_value_4 = /*paragraph*/ ctx[6].t.head;
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks_1[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	let each_value_2 = /*paragraph*/ ctx[6].t.data;
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	return {
		c() {
			table = element("table");
			thead = element("thead");
			tr = element("tr");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
		},
		m(target, anchor) {
			insert(target, table, anchor);
			append(table, thead);
			append(thead, tr);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(tr, null);
			}

			append(table, t);
			append(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*sections*/ 2) {
				each_value_4 = /*paragraph*/ ctx[6].t.head;
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_4(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(tr, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_4.length;
			}

			if (dirty & /*sections*/ 2) {
				each_value_2 = /*paragraph*/ ctx[6].t.data;
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d(detaching) {
			if (detaching) detach(table);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (26:32) {#each paragraph.t.head as th}
function create_each_block_4(ctx) {
	let th;
	let raw_value = /*th*/ ctx[15] + "";

	return {
		c() {
			th = element("th");
		},
		m(target, anchor) {
			insert(target, th, anchor);
			th.innerHTML = raw_value;
		},
		p(ctx, dirty) {
			if (dirty & /*sections*/ 2 && raw_value !== (raw_value = /*th*/ ctx[15] + "")) th.innerHTML = raw_value;;
		},
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (34:36) {#each tr as td}
function create_each_block_3(ctx) {
	let td;
	let raw_value = /*td*/ ctx[12] + "";

	return {
		c() {
			td = element("td");
		},
		m(target, anchor) {
			insert(target, td, anchor);
			td.innerHTML = raw_value;
		},
		p(ctx, dirty) {
			if (dirty & /*sections*/ 2 && raw_value !== (raw_value = /*td*/ ctx[12] + "")) td.innerHTML = raw_value;;
		},
		d(detaching) {
			if (detaching) detach(td);
		}
	};
}

// (32:32) {#each paragraph.t.data as tr}
function create_each_block_2(ctx) {
	let tr;
	let t;
	let each_value_3 = /*tr*/ ctx[9];
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	return {
		c() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
		},
		m(target, anchor) {
			insert(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}

			append(tr, t);
		},
		p(ctx, dirty) {
			if (dirty & /*sections*/ 2) {
				each_value_3 = /*tr*/ ctx[9];
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}
		},
		d(detaching) {
			if (detaching) detach(tr);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (15:12) {#each section.body as paragraph}
function create_each_block_1(ctx) {
	let p;
	let t0;
	let t1;
	let if_block0 = /*paragraph*/ ctx[6].p && create_if_block_1(ctx);
	let if_block1 = /*paragraph*/ ctx[6].t && create_if_block(ctx);

	return {
		c() {
			p = element("p");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			attr(p, "class", "section-body svelte-xzd43t");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			if (if_block0) if_block0.m(p, null);
			append(p, t0);
			if (if_block1) if_block1.m(p, null);
			append(p, t1);
		},
		p(ctx, dirty) {
			if (/*paragraph*/ ctx[6].p) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(p, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*paragraph*/ ctx[6].t) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(p, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d(detaching) {
			if (detaching) detach(p);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

// (13:8) {#each sections as section}
function create_each_block(ctx) {
	let strong;
	let t0_value = /*section*/ ctx[3].title + "";
	let t0;
	let t1;
	let each_1_anchor;
	let each_value_1 = /*section*/ ctx[3].body;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			strong = element("strong");
			t0 = text(t0_value);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			attr(strong, "class", "title svelte-xzd43t");
		},
		m(target, anchor) {
			insert(target, strong, anchor);
			append(strong, t0);
			insert(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*sections*/ 2 && t0_value !== (t0_value = /*section*/ ctx[3].title + "")) set_data(t0, t0_value);

			if (dirty & /*sections*/ 2) {
				each_value_1 = /*section*/ ctx[3].body;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) detach(strong);
			if (detaching) detach(t1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let div1;
	let t0;
	let div0;
	let h1;
	let t1;
	let t2;
	let current;
	const docsnav = new DocsNav({ props: { allNodes: /*allNodes*/ ctx[2] } });
	let each_value = /*sections*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			create_component(docsnav.$$.fragment);
			t0 = space();
			div0 = element("div");
			h1 = element("h1");
			t1 = text(/*title*/ ctx[0]);
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "docs");
			attr(div1, "class", "container svelte-xzd43t");
			attr(div2, "class", "docs-container svelte-xzd43t");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			mount_component(docsnav, div1, null);
			append(div1, t0);
			append(div1, div0);
			append(div0, h1);
			append(h1, t1);
			append(div0, t2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			const docsnav_changes = {};
			if (dirty & /*allNodes*/ 4) docsnav_changes.allNodes = /*allNodes*/ ctx[2];
			docsnav.$set(docsnav_changes);
			if (!current || dirty & /*title*/ 1) set_data(t1, /*title*/ ctx[0]);

			if (dirty & /*sections*/ 2) {
				each_value = /*sections*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;
			transition_in(docsnav.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(docsnav.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(docsnav);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props, { sections } = $$props, { allNodes } = $$props;

	$$self.$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("sections" in $$props) $$invalidate(1, sections = $$props.sections);
		if ("allNodes" in $$props) $$invalidate(2, allNodes = $$props.allNodes);
	};

	return [title, sections, allNodes];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0, sections: 1, allNodes: 2 });
	}
}

export default Component;