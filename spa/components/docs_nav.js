/* generated by Svelte v3.23.0 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '/spa/web_modules/svelte/internal/index.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (17:8) {#if node.type == "docs"}
function create_if_block(ctx) {
	let show_if = !/*group*/ ctx[1].includes(/*node*/ ctx[4].fields.group);
	let t0;
	let a;
	let t1_value = /*node*/ ctx[4].fields.title + "";
	let t1;
	let a_href_value;
	let if_block = show_if && create_if_block_1(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			t0 = space();
			a = element("a");
			t1 = text(t1_value);
			attr(a, "href", a_href_value = /*node*/ ctx[4].path);
			attr(a, "class", "nav-link svelte-jm71kp");
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*allNodes*/ 1) show_if = !/*group*/ ctx[1].includes(/*node*/ ctx[4].fields.group);

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*allNodes*/ 1 && t1_value !== (t1_value = /*node*/ ctx[4].fields.title + "")) set_data(t1, t1_value);

			if (dirty & /*allNodes*/ 1 && a_href_value !== (a_href_value = /*node*/ ctx[4].path)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(a);
		}
	};
}

// (18:12) {#if !group.includes(node.fields.group)}
function create_if_block_1(ctx) {
	let strong;
	let t_value = /*addGroup*/ ctx[2](/*node*/ ctx[4].fields.group) + "";
	let t;

	return {
		c() {
			strong = element("strong");
			t = text(t_value);
			attr(strong, "class", "svelte-jm71kp");
		},
		m(target, anchor) {
			insert(target, strong, anchor);
			append(strong, t);
		},
		p(ctx, dirty) {
			if (dirty & /*allNodes*/ 1 && t_value !== (t_value = /*addGroup*/ ctx[2](/*node*/ ctx[4].fields.group) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(strong);
		}
	};
}

// (16:4) {#each allNodes.sort(sortNav) as node}
function create_each_block(ctx) {
	let if_block_anchor;
	let if_block = /*node*/ ctx[4].type == "docs" && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*node*/ ctx[4].type == "docs") {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let each_value = /*allNodes*/ ctx[0].sort(/*sortNav*/ ctx[3]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "sidebar svelte-jm71kp");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*allNodes, sortNav, addGroup, group*/ 15) {
				each_value = /*allNodes*/ ctx[0].sort(/*sortNav*/ ctx[3]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { allNodes } = $$props;
	let group = [];

	const addGroup = newGroup => {
		group.push(newGroup);
		return newGroup;
	};

	const sortNav = (a, b) => {
		if (typeof a.fields.order !== "undefined" && typeof b.fields.order !== "undefined") {
			return a.fields.order - b.fields.order;
		}

		return -1;
	};

	$$self.$set = $$props => {
		if ("allNodes" in $$props) $$invalidate(0, allNodes = $$props.allNodes);
	};

	return [allNodes, group, addGroup, sortNav];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { allNodes: 0 });
	}
}

export default Component;