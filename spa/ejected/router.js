/* generated by Svelte v3.23.0 */
import {
	SvelteComponent,
	create_component,
	destroy_component,
	init,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from '/spa/web_modules/svelte/internal/index.js';

import Navaid from '/spa/web_modules/navaid/dist/navaid.js';
import nodes from "./nodes.js";
import Html from '/spa/ejected/../global/html.js';

function create_fragment(ctx) {
	let current;

	const html = new Html({
			props: {
				route: /*route*/ ctx[0],
				node: /*node*/ ctx[1],
				allNodes: /*allNodes*/ ctx[2]
			}
		});

	return {
		c() {
			create_component(html.$$.fragment);
		},
		m(target, anchor) {
			mount_component(html, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const html_changes = {};
			if (dirty & /*route*/ 1) html_changes.route = /*route*/ ctx[0];
			if (dirty & /*node*/ 2) html_changes.node = /*node*/ ctx[1];
			if (dirty & /*allNodes*/ 4) html_changes.allNodes = /*allNodes*/ ctx[2];
			html.$set(html_changes);
		},
		i(local) {
			if (current) return;
			transition_in(html.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(html.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(html, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let route, node, allNodes;

	const getNode = (uri, trailingSlash = "") => {
		return nodes.find(node => node.path + trailingSlash == uri);
	};

	let uri = location.pathname;
	node = getNode(uri);

	if (node === undefined) {
		node = getNode(uri, "/");
	}

	allNodes = nodes;

	function draw(m) {
		$$invalidate(1, node = getNode(uri));

		if (node === undefined) {
			// Check if there is a 404 data source.
			$$invalidate(1, node = getNode("/404"));

			if (node === undefined) {
				// If no 404.json data source exists, pass placeholder values.
				$$invalidate(1, node = {
					"path": "/404",
					"type": "404",
					"filename": "404.json",
					"fields": {}
				});
			}
		}

		$$invalidate(0, route = m.default);
		window.scrollTo(0, 0);
	}

	function track(obj) {
		uri = obj.state || obj.uri;
	}

	addEventListener("replacestate", track);
	addEventListener("pushstate", track);
	addEventListener("popstate", track);

	const handle404 = () => {
		import("../content/404.js").then(draw).catch(err => {
			console.log("Add a '/layout/content/404.svelte' file to handle Page Not Found errors.");
			console.log("If you want to pass data to your 404 component, you can also add a '/content/404.json' file.");
			console.log(err);
		});
	};

	const router = Navaid("/", handle404);

	allNodes.forEach(node => {
		router.on(node.path, () => {
			// Check if the url visited ends in a trailing slash (besides the homepage).
			if (uri.length > 1 && uri.slice(-1) == "/") {
				// Redirect to the same path without the trailing slash.
				router.route(node.path, false);
			} else {
				import("../content/" + node.type + ".js").then(draw).catch(handle404);
			}
		});
	});

	router.listen();
	return [route, node, allNodes];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;